#!/usr/bin/env php
<?php

date_default_timezone_set('Europe/Paris');
include __DIR__ .'/libs/poparser.php';

if (php_sapi_name() != 'cli') {
    die('Nope');
}

require_once __DIR__ . '/inc/init.php';

/* init l10n class to create the globals needed */
$initl10n = new l10n_moz();

/* user provided variables */
$filename   = (isset($argv[1])) ? secureText($argv[1]) : 'main.lang'; // which file are we comparing? Set a default
$website    = (isset($argv[2])) ? secureText($argv[2])  : '0'; // which website are we looking at? Default to www.mozilla.org
$locale     = (isset($argv[3])) ? secureText($argv[3])  : 'all';  // which locale are we analysing? No default

/* temp variables */
$reflang  = $sites[$website][5];
$source   = $sites[$website][1] . $sites[$website][2] . $reflang . '/' . $filename;

error_log("Reference English file: $source \n");

getEnglishSource($reflang, $website, $filename, 1);

if ($GLOBALS['__english_moz'] == null) {
    die("$source does not exist");
}

if ($filename == 'all') {
    $files = $langfiles_subsets[$sites[$website][0]];
} else {
    $files = array($filename);
}

if ($locale != 'all' && in_array($locale, $langfiles_subsets[$sites[$website][0]][$filename])) {
    $locales = array($locale);
} elseif ($locale == 'locamotion') {
    $locales = array_intersect($locamotion_locales, $langfiles_subsets[$sites[$website][0]][$filename]);
} else {
    $locales = $langfiles_subsets[$sites[$website][0]][$filename];
}

/* loop generating the files */
foreach ($files as $filename) {
    if (isset($langfiles_subsets[$sites[$website][0]][$filename])) {
        $result = '';
        foreach ($locales as $_lang) {

            $source = $sites[$website][1] . $sites[$website][2] . $_lang . '/' . $filename;

            /* here we load preexisting lang files */
            l10n_moz::load($source);

            /* is the lang file using Windows or Unix EOL? */
            if (file_exists($source)) {
                $eol = file($source);
                $eol = isWindowsEOL($eol[0]) ? "\r\n" : "\n";
            } else {
                $eol = "\n";
            }

            $activeStatus = (boolean) $GLOBALS['__l10n_moz']['activated'];

            /* import data from locamotion */
            if ($locale == 'locamotion') {
                scrapLocamotion($_lang, $filename, $source);
            }
            /* incorporate strings from other lang files */
            //~ l10n_moz::load($sites[$website][1] . $sites[$website][2] . $_lang . '/survey1.lang');
            //~ l10n_moz::load($sites[$website][1] . $sites[$website][2] . $_lang . '/survey2.lang');
            //~ l10n_moz::load($sites[$website][1] . $sites[$website][2] . $_lang . '/survey3.lang');
            //~ l10n_moz::load($sites[$website][1] . $sites[$website][2] . $_lang . '/snippets.lang');
            //~ l10n_moz::load($sites[$website][1] . $sites[$website][2] . $_lang . '/mozorg/about.lang');

            $GLOBALS['__l10n_moz']['activated'] = (boolean) $activeStatus;

            $exceptions = array(
                // new string => older equivalent string
                'Different by design'           => 'Different by Design',
                'Proudly<br />non-profit'       => 'Proudly <span>non-profit</span>',
                'Innovating<br />for you'       => 'Innovating <span>for you</span>',
                'Fast, flexible,<br />secure'   => 'Fast, flexible, <span>secure</span>',
            );

            $exceptions = array(
                //~ 'Mozilla and partners prepare to launch first Firefox OS smartphones' => 'Mozilla and partners prepare to launch first Firefox OS smartsphones'
            );

            $content = buildFile($eol, $exceptions);
            $path    = $source;
            //~ print_r($content);die; //debug

            fileForceContents($path, $content);

            $result .= $_lang  . ': ' . $filename . $eol;

            if (isset($GLOBALS['__l10n_moz'])) {
                unset($GLOBALS['__l10n_moz']);
            }
        }
        error_log($result);
    }
}

/* functions used for this script */

function buildFile($eol, $exceptions = array())
{
    ob_start();
    header('Content-type: text/plain; charset=UTF-8');

    if ($GLOBALS['__l10n_moz']['activated']) {
        echo '## active ##' . $eol;
    }

    foreach ($GLOBALS['__english_moz'] as $key => $val) {
        if ($key == 'activated') {
            continue;
        }

        if ($key == 'filedescription') {
            foreach ($GLOBALS['__english_moz']['filedescription'] as $header) {
                echo '## NOTE: ' . $header . $eol;
            }
            echo  $eol . $eol;
            continue;
        }
        echo dumpString($key, $eol, $exceptions);
    }

    /* put l10n extras at the end of the file */
    foreach ($GLOBALS['__l10n_moz'] as $key => $val) {
        if (strstr($key, '{l10n-extra}') == true) {
            echo dumpString($key, $eol);
        }
    }

    $content = ob_get_contents();
    ob_end_clean();

    return $content;
}

function dumpString($english, $eol, $exceptions = array())
{
    if ($english == 'activated') {
        return;
    }

    $chunk = '';

    if (isset($GLOBALS['__l10n_comments'][$english])) {
        $chunk .= '# ' . trim($GLOBALS['__l10n_comments'][$english]) . $eol;
    }

    $chunk .= ";$english" . $eol;

    $span_to_br = function ($str) {
        return str_replace(array('<span>', '</span>'), array('<br />', ''), $str);
    };

    if (array_key_exists($english, $exceptions)
        && isset($GLOBALS['__l10n_moz'][$exceptions[$english]])
        ) {
        $tempString = strip_tags($GLOBALS['__l10n_moz'][$exceptions[$english]]);

        if ($english == 'Potentially vulnerable plugins') {
            $tempString = str_replace(':', '', $tempString);
        } elseif ($english == 'vulnerable') {
            $tempString = strtolower($tempString);
        }

        $chunk .= $tempString;
    } else {
        $chunk .= (array_key_exists($english, $GLOBALS['__l10n_moz'])) ? $GLOBALS['__l10n_moz'][$english]: $english;
    }

    $chunk .= $eol . $eol . $eol;

    return $chunk;
}

function fileForceContents($dir, $contents)
{
    $parts = explode('/', $dir);
    $file = array_pop($parts);
    $dir = '';

    foreach ($parts as $part) {
        if (!is_dir($dir .= "/$part")) {
            mkdir($dir);
        }
    }

    file_put_contents("$dir/$file", $contents);
}

function isWindowsEOL($line)
{
    return (substr($line, -2) === "\r\n") ? true : false;
}

function scrapLocamotion($_lang, $filename, $source)
{
    global $mozillaorg_lang;
    global $locamotion_locales;

    if (!in_array($_lang, $locamotion_locales)) {
        return;
    }

    error_log('== ' . $_lang . ' ==');

    /* import data from locamotion */
    $locamotion = 'https://raw.github.com/translate/mozilla-lang/master/'
                  . str_replace('-', '_', $_lang)
                  . '/' . $filename . '.po';
    $po_exists = strstr(get_headers($locamotion, 1)[0], '200') ? true : false;

    if ($po_exists) {
        error_log("Fetching $filename from Locamotion");
        file_put_contents('temp.po', file_get_contents($locamotion));

        $po_parser = new PoParser();
        $po_strings = $po_parser->read('temp.po');

        $temp_lang  = '';

        if (count($po_strings) > 0) {

            foreach ($po_strings as $entry) {
                if (!isset($entry['fuzzy']) && $entry['msgstr'][0] != '') {
                    $temp_lang .=
                        ';'
                        . $entry['msgid'][0] . PHP_EOL
                        . $entry['msgstr'][0] . PHP_EOL. PHP_EOL. PHP_EOL;
                }
            }

            file_put_contents('temp.lang', $temp_lang);

            // we keep copies of the global array in $a and $b for diff puroposes
            $a = $GLOBALS['__l10n_moz'];
            l10n_moz::load('temp.lang');
            $b = $GLOBALS['__l10n_moz'];
            $have_imported_strings = false;

            foreach ($b as $key => $val) {
                $val = is_array($val) ? $val[0] : $val;
                if ($key != $val
                    && $key != 'filedescription'
                    && $key != 'activated'
                    && array_key_exists($key, $a)
                    ) {
                    if ($a[$key] == $key) {
                        error_log('Imported string: ' . $key .' => ' . $val);
                        $have_imported_strings = true;
                    }
                }
            }

            if ($have_imported_strings) {
                error_log("Data from Locamotion extracted and added to local repository.\n");
            } else {
                error_log("No new strings from Locamotion added to local repository.\n");
            }

            unlink('temp.lang');
            unset($po_parser);

        } else {
            error_log($filename . '.po has no strings in it');
        }

        unlink('temp.po');
    }
}
